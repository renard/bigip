{{ define "delimiter" }}
#F5# ---8<---8<---8<---8<---8<---{{ end }}

{{/*
# block_header writes a block (rule, profile, etc) header which
# contains the type, the name and the source of original block
# definition.
#
# Context should be a map with:
#
# Context should be a map like block_original.
*/}}
{{- define "block_header" }}
{{-   $block := index . "block" }}
{{-   $type := index . "type" }}
### {{ $type }}: {{ $block.Name }}
## file: {{ $block.OriginalConfig.File }}, {{ index $block.OriginalConfig.Lines 2 }} lines: {{ index $block.OriginalConfig.Lines 0 }}-{{ index $block.OriginalConfig.Lines 1 }}
#
{{-   template "delimiter" }}
{{- end }}


{{/*
# block_footer writes a block (rule, profile, etc) footer which
# contains the type, the name of the block.
#
# Context should be a map like block_original.
*/}}
{{- define "block_footer" }}
{{-   $block := index . "block" }}
{{-   $type := index . "type" }}
{{-   template "delimiter" }}
#
{{-   with index . "translated" }}{{ . }}{{ end }}
### /{{ $type }}: {{ $block.Name }}
{{- end }}


{{/*
# block_original writes a block (rule, profile, etc) footer, original
# definition in comments and footer.
#
# * block: the block definition
# * type: a string defining the block type (rule, profile, etc...)
*/}}
{{- define "block_original" }}
{{-   template "block_header" . }}
{{      scomment ( index . "block" ).Original 4 0 "#F5#" }}
{{-   template "block_footer" . }}
{{-   $type := index . "type" }}
{{-    if eq $type "pool" }}
{{-      template "block_pool" . }}
{{-    end }}
{{-    if eq $type "virtual" }}
{{-      template "block_virtual" . }}
{{-    end }}
{{- end }}



{{/*
# block_pool converts a F5Pool into HAProxy backend.
#
# * monitors are taken from their original templates
# * monitors are conserverted as basic server lines
#
*/}}
{{ define "block_pool" }}
{{-   $block := index . "block" }}
{{-   $root := (index . "root").F5config }}
backend {{ $block.Name }}
{{-  with $block.Monitor }}
{{-    range $i, $monitor := . }}
{{ printf "{{   templateIndent 4 \"monitor:%s\" \"\" }}" $monitor  }}
{{-    end }}
{{-  end }}
{{-  with $block.Members }}
{{-    range $i, $member := . }}
{{-      with (index $root.LtmNode (index (split (index (split $member.Name ":") 0) "%") 0)) }}
    server {{ with .Description }}{{ . }}{{ else }}{{ .Name }}{{ end }} {{ .Address }}:{{ index (split $member.Name ":") 1 }} check
{{-      else }}
    server {{ $member.Name }} {{ $member.Address }}:{{ index (split $member.Name ":") 1 }}
{{-      end }}
{{-    end }}
{{-  end }}
{{- end }}


{{/*
# block_virtual converts a F5Pool into HAProxy backend.
#
*/}}
{{ define "block_virtual" }}
{{-   $block := index . "block" }}
frontend {{ $block.Name }}
    bind {{ ipport $block.Destination }}{{ if eq $block.Source "0.0.0.0/0" }} transparent{{ end }}
{{-   with $block.VsIndex }}
    id {{ $block.VsIndex }}
{{-   end }}
    mode {{ with $block.IpProtocol }}{{ if eq "tcp" . }}tcp{{ else }}http{{ end }}{{ else }}http{{ end }}
{{-   with $block.Persist }}
    # persistances
{{-     range $i, $persistance := . }}
{{        printf "{{   templateIndent 4 \"persistance:%s\" \"\" }}" $persistance.Name  }}
{{-     end }}
{{-   end }}
{{-   with $block.Profiles }}
    # profiles
{{-     range $i, $profile := . }}
{{        printf "{{   templateIndent 4 \"profile:%s\" \"\" }}" $profile.Name  }}
{{-     end }}
{{-   end }}
{{-   with $block.Rules }}
    # rules
{{-     range $i, $rule := . }}
{{        printf "{{   templateIndent 4 \"rule:%s\" \"\" }}" $rule  }}
{{-     end }}
{{-   end }}
{{- end }}




{{/*
# block writes a block (rule, profile, etc) template for later use
#
# * blocks: a list of all block definitions
# * type: a string defining the block type (rule, profile, etc...)
#
# If a block is already defined, its definition will be used instead
# of the parsed value. This allows to iterate over block definitions.
*/}}
{{- define "block" }}
{{-   $existing := 0 }}
{{-   $type := index . "type" }}
{{-   $blocks := index . "blocks" }}
{{-   $root := index . "root" }}
{{ "{{- /*" }}
###
### {{ $type }} definitions
###
{{ "*/ -}}" }}
{{    if eq $type "monitor" }}{{ template "monitor-builtin" }}{{ end }}
{{    range $idx, $block := index $blocks }}
{{-   if or (eq $type "pool") (eq $type "virtual") }}
{{ "{{" }} define "{{ $type }}:{{ $block.Name }}" {{ "}}" }}
{{-   else }}
{{ "{{" }} define "-{{ $type }}:{{ $block.Name }}" {{ "}}" }}
{{-   end }}
{{-      if hasTemplate $block.Name }}
{{-         templateIndent 0 (printf "%s:%s" $type $block.Name) . }}
{{-         $existing = add $existing 1 }}
{{-      else }}
{{-         template "block_original" ( dict "block" $block "type" $type "root" $root ) }}
{{       end }}
{{- "{{ end }}" }}

{{    end }}
{{ "{{- /*" }}
###
### {{ len $blocks }} {{ $type }} definitons ({{ $existing }} existing)
###
{{ "*/ -}}" }}
{{ end }}


{{ define "monitor-builtin" }}

### Builtin monitors

{{ "{{" }} define "-monitor:/Common/tcp" {{ "}}" }}
### monitor: /Common/tcp
### /monitor: /Common/tcp
{{ "{{ end }}" }}

{{ "{{" }} define "monitor:/Common/http" {{ "}}" }}
### monitor: /Common/http
option httpchk
### /monitor: /Common/http
{{ "{{ end }}" }}

{{ "{{" }} define "monitor:/Common/https" {{ "}}" }}
### monitor: /Common/https
option httpchk
### /monitor: /Common/https
{{ "{{ end }}" }}

### /Builtin monitors
{{ end }}

{{ define "export" }}
{{-   with .F5config.LtmVirtual }}
{{-    template "block" ( dict "blocks" . "type" "virtual" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmPool }}
{{-    template "block" ( dict "blocks" . "type" "pool" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmRule }}
{{-    template "block" ( dict "blocks" . "type" "rule" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmProfile }}
{{-     template "block" ( dict "blocks" . "type" "profile" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmNode }}
{{-     template "block" ( dict "blocks" . "type" "node" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmMonitor }}
{{-     template "block" ( dict "blocks" . "type" "monitor" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmPersistence }}
{{-     template "block" ( dict "blocks" . "type" "persistence" "root" $ ) }}
{{-   end }}
{{- end }}
