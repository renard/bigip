{{/*
# Copyright © 2023 Sébastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>
#
# Created: 2022-01-03
# Last changed: 2023-07-22 03:00:01
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.
*/}}

{{ define "delimiter" }}
#F5# ---8<---8<---8<---8<---8<---{{ end }}

{{/*
# block_header writes a block (rule, profile, etc) header which
# contains the type, the name and the source of original block
# definition.
#
# Context should be a map with:
#
# Context should be a map like block_original.
*/}}
{{- define "block_header" }}
{{-   $block := index . "block" }}
{{-   $type := index . "type" }}
### {{ $type }}: {{ $block.Name }}
## file: {{ $block.OriginalConfig.File }}, {{ index $block.OriginalConfig.Lines 2 }} lines: {{ index $block.OriginalConfig.Lines 0 }}-{{ index $block.OriginalConfig.Lines 1 }}
#
{{-   template "delimiter" }}
{{- end }}


{{/*
# block_footer writes a block (rule, profile, etc) footer which
# contains the type, the name of the block.
#
# Context should be a map like block_original.
*/}}
{{- define "block_footer" }}
{{-   $block := index . "block" }}
{{-   $type := index . "type" }}
#
{{-   with index . "translated" }}{{ . }}{{ end }}
### /{{ $type }}: {{ $block.Name }}
{{- end }}


{{/*
# block_original writes a block (rule, profile, etc) footer, original
# definition in comments and footer.
#
# * block: the block definition
# * type: a string defining the block type (rule, profile, etc...)
*/}}
{{- define "block_original" }}
{{-   template "block_header" . }}
{{    scomment ( index . "block" ).Original 4 0 "#F5#" }}
{{-   template "delimiter" }}
{{-   $type := index . "type" }}
{{-    if eq $type "pool" }}
{{-      template "block_pool" . }}
{{-    end }}
{{-    if eq $type "virtual" }}
{{-      template "block_virtual" . }}
{{-    end }}
{{-   template "block_footer" . }}
{{- end }}







{{/*
# block writes a block (rule, profile, etc) template for later use
#
# * blocks: a list of all block definitions
# * type: a string defining the block type (rule, profile, etc...)
#
# If a block is already defined, its definition will be used instead
# of the parsed value. This allows to iterate over block definitions.
*/}}
{{- define "block" }}
{{-   $existing := 0 }}
{{-   $type := index . "type" }}
{{-   $blocks := index . "blocks" }}
{{-   $root := index . "root" }}
{{ "{{- /*" }}
###
### {{ $type }} definitions
###
{{ "*/ -}}" }}
{{    if eq $type "persistence" }}{{ template "persistence-builtin" }}{{ end }}
{{    if eq $type "profile" }}{{ template "profile-builtin" }}{{ end }}
{{    if eq $type "monitor" }}{{ template "monitor-builtin" }}{{ end }}
{{    if eq $type "rule" }}{{ template "rule-builtin" }}{{ end }}
{{    range $idx, $block := index $blocks }}
{{    $template := printf "%s:%s" $type $block.Name }}
{{-   if or (eq $type "pool") (eq $type "virtual") }}
{{ "{{" }} define "{{ $template }}" {{ "}}" }}
{{-   else }}
{{ "{{" }} define "{{- if not (hasTemplate $template) }}-{{ end }}{{ $template }}" {{ "}}" }}
{{-   end }}
{{-      if hasTemplate $template }}
{{-         templateIndent 0 $template . }}
{{-         $existing = add $existing 1 }}
{{-      else }}
{{-         template "block_original" ( dict "block" $block "type" $type "root" $root ) }}
{{       end }}
{{- "{{ end }}" }}

{{    end }}
{{ "{{- /*" }}
###
### {{ len $blocks }} {{ $type }} definitons ({{ $existing }} existing)
###
{{ "*/ -}}" }}
{{ end }}










{{ define "export" }}
{{-   with .F5config.LtmVirtual }}
{{-    template "block" ( dict "blocks" . "type" "virtual" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmPool }}
{{-    template "block" ( dict "blocks" . "type" "pool" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmRule }}
{{-    template "block" ( dict "blocks" . "type" "rule" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmPolicy }}
{{-     template "block" ( dict "blocks" . "type" "policy" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmProfile }}
{{-     template "block" ( dict "blocks" . "type" "profile" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmNode }}
{{-     if not $.F5config.LtmPool }}
{{-       template "block" ( dict "blocks" . "type" "node" "root" $ ) }}
{{-     end }}
{{-   end }}
{{-   with .F5config.LtmMonitor }}
{{-     template "block" ( dict "blocks" . "type" "monitor" "root" $ ) }}
{{-   end }}
{{-   with .F5config.LtmPersistence }}
{{-     template "block" ( dict "blocks" . "type" "persistence" "root" $ ) }}
{{-   end }}
{{- end }}
